// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get lootId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get lootId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Helms__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class Helms extends ethereum.SmartContract {
  static bind(address: Address): Helms {
    return new Helms("Helms", address);
  }

  PROVENANCE(): string {
    let result = super.call("PROVENANCE", "PROVENANCE():(string)", []);

    return result[0].toString();
  }

  try_PROVENANCE(): ethereum.CallResult<string> {
    let result = super.tryCall("PROVENANCE", "PROVENANCE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  helmRarity(lootId: BigInt): BigInt {
    let result = super.call("helmRarity", "helmRarity(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lootId)
    ]);

    return result[0].toBigInt();
  }

  try_helmRarity(lootId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("helmRarity", "helmRarity(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lootId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  id(lootId: BigInt): BigInt {
    let result = super.call("id", "id(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lootId)
    ]);

    return result[0].toBigInt();
  }

  try_id(lootId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("id", "id(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(lootId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lootClaimed(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "lootClaimed",
      "lootClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_lootClaimed(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "lootClaimed",
      "lootClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lootClaimedBatched(loot: Address, ids: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "lootClaimedBatched",
      "lootClaimedBatched(address,uint256[]):(bool[])",
      [
        ethereum.Value.fromAddress(loot),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBooleanArray();
  }

  try_lootClaimedBatched(
    loot: Address,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "lootClaimedBatched",
      "lootClaimedBatched(address,uint256[]):(bool[])",
      [
        ethereum.Value.fromAddress(loot),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  lootMinted(param0: BigInt): boolean {
    let result = super.call("lootMinted", "lootMinted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_lootMinted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("lootMinted", "lootMinted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lootMintedBatched(ids: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "lootMintedBatched",
      "lootMintedBatched(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return result[0].toBooleanArray();
  }

  try_lootMintedBatched(
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "lootMintedBatched",
      "lootMintedBatched(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  lootOnly(): boolean {
    let result = super.call("lootOnly", "lootOnly():(bool)", []);

    return result[0].toBoolean();
  }

  try_lootOnly(): ethereum.CallResult<boolean> {
    let result = super.tryCall("lootOnly", "lootOnly():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lootOwnerPriceCommon(): BigInt {
    let result = super.call(
      "lootOwnerPriceCommon",
      "lootOwnerPriceCommon():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lootOwnerPriceCommon(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lootOwnerPriceCommon",
      "lootOwnerPriceCommon():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lootOwnerPriceEpic(): BigInt {
    let result = super.call(
      "lootOwnerPriceEpic",
      "lootOwnerPriceEpic():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lootOwnerPriceEpic(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lootOwnerPriceEpic",
      "lootOwnerPriceEpic():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lootOwnerPriceLegendary(): BigInt {
    let result = super.call(
      "lootOwnerPriceLegendary",
      "lootOwnerPriceLegendary():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lootOwnerPriceLegendary(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lootOwnerPriceLegendary",
      "lootOwnerPriceLegendary():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lootOwnerPriceMythic(): BigInt {
    let result = super.call(
      "lootOwnerPriceMythic",
      "lootOwnerPriceMythic():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lootOwnerPriceMythic(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lootOwnerPriceMythic",
      "lootOwnerPriceMythic():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadataContract(): Address {
    let result = super.call(
      "metadataContract",
      "metadataContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_metadataContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataContract",
      "metadataContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publicPriceCommon(): BigInt {
    let result = super.call(
      "publicPriceCommon",
      "publicPriceCommon():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicPriceCommon(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicPriceCommon",
      "publicPriceCommon():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicPriceEpic(): BigInt {
    let result = super.call(
      "publicPriceEpic",
      "publicPriceEpic():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicPriceEpic(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicPriceEpic",
      "publicPriceEpic():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicPriceLegendary(): BigInt {
    let result = super.call(
      "publicPriceLegendary",
      "publicPriceLegendary():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicPriceLegendary(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicPriceLegendary",
      "publicPriceLegendary():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicPriceMythic(): BigInt {
    let result = super.call(
      "publicPriceMythic",
      "publicPriceMythic():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicPriceMythic(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicPriceMythic",
      "publicPriceMythic():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(param0: BigInt, salePrice: BigInt): Helms__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new Helms__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    param0: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<Helms__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Helms__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  state(): i32 {
    let result = super.call("state", "state():(uint8)", []);

    return result[0].toI32();
  }

  try_state(): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get lootsList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get lmart(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get riftData(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OwnerClaimCall extends ethereum.Call {
  get inputs(): OwnerClaimCall__Inputs {
    return new OwnerClaimCall__Inputs(this);
  }

  get outputs(): OwnerClaimCall__Outputs {
    return new OwnerClaimCall__Outputs(this);
  }
}

export class OwnerClaimCall__Inputs {
  _call: OwnerClaimCall;

  constructor(call: OwnerClaimCall) {
    this._call = call;
  }

  get lootIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class OwnerClaimCall__Outputs {
  _call: OwnerClaimCall;

  constructor(call: OwnerClaimCall) {
    this._call = call;
  }
}

export class PurchaseMatchingCall extends ethereum.Call {
  get inputs(): PurchaseMatchingCall__Inputs {
    return new PurchaseMatchingCall__Inputs(this);
  }

  get outputs(): PurchaseMatchingCall__Outputs {
    return new PurchaseMatchingCall__Outputs(this);
  }
}

export class PurchaseMatchingCall__Inputs {
  _call: PurchaseMatchingCall;

  constructor(call: PurchaseMatchingCall) {
    this._call = call;
  }

  get claimLoot(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get claimIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get lootIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get claimRiftXP(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class PurchaseMatchingCall__Outputs {
  _call: PurchaseMatchingCall;

  constructor(call: PurchaseMatchingCall) {
    this._call = call;
  }
}

export class PurchasePublicCall extends ethereum.Call {
  get inputs(): PurchasePublicCall__Inputs {
    return new PurchasePublicCall__Inputs(this);
  }

  get outputs(): PurchasePublicCall__Outputs {
    return new PurchasePublicCall__Outputs(this);
  }
}

export class PurchasePublicCall__Inputs {
  _call: PurchasePublicCall;

  constructor(call: PurchasePublicCall) {
    this._call = call;
  }

  get lootIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class PurchasePublicCall__Outputs {
  _call: PurchasePublicCall;

  constructor(call: PurchasePublicCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMetadataContractCall extends ethereum.Call {
  get inputs(): SetMetadataContractCall__Inputs {
    return new SetMetadataContractCall__Inputs(this);
  }

  get outputs(): SetMetadataContractCall__Outputs {
    return new SetMetadataContractCall__Outputs(this);
  }
}

export class SetMetadataContractCall__Inputs {
  _call: SetMetadataContractCall;

  constructor(call: SetMetadataContractCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMetadataContractCall__Outputs {
  _call: SetMetadataContractCall;

  constructor(call: SetMetadataContractCall) {
    this._call = call;
  }
}

export class SetPricesCommonCall extends ethereum.Call {
  get inputs(): SetPricesCommonCall__Inputs {
    return new SetPricesCommonCall__Inputs(this);
  }

  get outputs(): SetPricesCommonCall__Outputs {
    return new SetPricesCommonCall__Outputs(this);
  }
}

export class SetPricesCommonCall__Inputs {
  _call: SetPricesCommonCall;

  constructor(call: SetPricesCommonCall) {
    this._call = call;
  }

  get newlootOwnerPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPublicPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPricesCommonCall__Outputs {
  _call: SetPricesCommonCall;

  constructor(call: SetPricesCommonCall) {
    this._call = call;
  }
}

export class SetPricesEpicCall extends ethereum.Call {
  get inputs(): SetPricesEpicCall__Inputs {
    return new SetPricesEpicCall__Inputs(this);
  }

  get outputs(): SetPricesEpicCall__Outputs {
    return new SetPricesEpicCall__Outputs(this);
  }
}

export class SetPricesEpicCall__Inputs {
  _call: SetPricesEpicCall;

  constructor(call: SetPricesEpicCall) {
    this._call = call;
  }

  get newlootOwnerPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPublicPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPricesEpicCall__Outputs {
  _call: SetPricesEpicCall;

  constructor(call: SetPricesEpicCall) {
    this._call = call;
  }
}

export class SetPricesLegendaryCall extends ethereum.Call {
  get inputs(): SetPricesLegendaryCall__Inputs {
    return new SetPricesLegendaryCall__Inputs(this);
  }

  get outputs(): SetPricesLegendaryCall__Outputs {
    return new SetPricesLegendaryCall__Outputs(this);
  }
}

export class SetPricesLegendaryCall__Inputs {
  _call: SetPricesLegendaryCall;

  constructor(call: SetPricesLegendaryCall) {
    this._call = call;
  }

  get newlootOwnerPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPublicPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPricesLegendaryCall__Outputs {
  _call: SetPricesLegendaryCall;

  constructor(call: SetPricesLegendaryCall) {
    this._call = call;
  }
}

export class SetPricesMythicCall extends ethereum.Call {
  get inputs(): SetPricesMythicCall__Inputs {
    return new SetPricesMythicCall__Inputs(this);
  }

  get outputs(): SetPricesMythicCall__Outputs {
    return new SetPricesMythicCall__Outputs(this);
  }
}

export class SetPricesMythicCall__Inputs {
  _call: SetPricesMythicCall;

  constructor(call: SetPricesMythicCall) {
    this._call = call;
  }

  get newlootOwnerPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPublicPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPricesMythicCall__Outputs {
  _call: SetPricesMythicCall;

  constructor(call: SetPricesMythicCall) {
    this._call = call;
  }
}

export class SetProvenanceCall extends ethereum.Call {
  get inputs(): SetProvenanceCall__Inputs {
    return new SetProvenanceCall__Inputs(this);
  }

  get outputs(): SetProvenanceCall__Outputs {
    return new SetProvenanceCall__Outputs(this);
  }
}

export class SetProvenanceCall__Inputs {
  _call: SetProvenanceCall;

  constructor(call: SetProvenanceCall) {
    this._call = call;
  }

  get prov(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetProvenanceCall__Outputs {
  _call: SetProvenanceCall;

  constructor(call: SetProvenanceCall) {
    this._call = call;
  }
}

export class SetStateCall extends ethereum.Call {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get newState(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newlootOnly(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class SetWyvernProxyWhitelistCall extends ethereum.Call {
  get inputs(): SetWyvernProxyWhitelistCall__Inputs {
    return new SetWyvernProxyWhitelistCall__Inputs(this);
  }

  get outputs(): SetWyvernProxyWhitelistCall__Outputs {
    return new SetWyvernProxyWhitelistCall__Outputs(this);
  }
}

export class SetWyvernProxyWhitelistCall__Inputs {
  _call: SetWyvernProxyWhitelistCall;

  constructor(call: SetWyvernProxyWhitelistCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetWyvernProxyWhitelistCall__Outputs {
  _call: SetWyvernProxyWhitelistCall;

  constructor(call: SetWyvernProxyWhitelistCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllERC20Call extends ethereum.Call {
  get inputs(): WithdrawAllERC20Call__Inputs {
    return new WithdrawAllERC20Call__Inputs(this);
  }

  get outputs(): WithdrawAllERC20Call__Outputs {
    return new WithdrawAllERC20Call__Outputs(this);
  }
}

export class WithdrawAllERC20Call__Inputs {
  _call: WithdrawAllERC20Call;

  constructor(call: WithdrawAllERC20Call) {
    this._call = call;
  }

  get erc20Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAllERC20Call__Outputs {
  _call: WithdrawAllERC20Call;

  constructor(call: WithdrawAllERC20Call) {
    this._call = call;
  }
}
