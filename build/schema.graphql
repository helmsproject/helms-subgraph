type _Schema_
  @fulltext(
    name: "helmSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Helm"
        fields: [
          { name: "name" }
        ]
      }
    ]
  )

type Account @entity {
  id: ID!
  balances: [Balance!]! @derivedFrom(field: "account")
  transfersOperator: [Transfer!]! @derivedFrom(field: "operator")
  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")
}

type HelmTokenRegistry @entity {
  id: ID!
  tokens: [Helm!]! @derivedFrom(field: "registry")
}

type Helm @entity {
  id: ID!
  registry: HelmTokenRegistry
  name: String
  totalSupply: BigInt!
  maxSupply: BigInt!
  prefix: String
  suffix: String
  order: String
  plusOne: Boolean
  rarity: String
  lootBags: [LootBag!] @derivedFrom(field: "helm")
  balances: [Balance!]! @derivedFrom(field: "helm")
  transfers: [Transfer!]! @derivedFrom(field: "helm")
}

type Balance @entity {
  id: ID!
  helm: Helm!
  account: Account!
  value: BigInt!
  transfersFrom: [Transfer!]! @derivedFrom(field: "fromBalance")
  transfersTo: [Transfer!]! @derivedFrom(field: "toBalance")
}

type Transfer implements Event @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  helm: Helm!
  operator: Account!
  from: Account!
  fromBalance: Balance
  to: Account!
  toBalance: Balance
  value: BigInt!
}

interface Event {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type LootBag @entity {
  id: ID!
  claimed: Boolean!
  helm: Helm
  publicClaim: Boolean
}
